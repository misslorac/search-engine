// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "kingso_cm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace kingso_cm {

namespace {

const ::google::protobuf::Descriptor* NodeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NodeState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_kingso_5fcm_2eproto() {
  protobuf_AddDesc_kingso_5fcm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "kingso_cm.proto");
  GOOGLE_CHECK(file != NULL);
  NodeInfo_descriptor_ = file->message_type(0);
  static const int NodeInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, node_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, node_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, col_id_),
  };
  NodeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeInfo_descriptor_,
      NodeInfo::default_instance_,
      NodeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeInfo));
  CMResponse_descriptor_ = file->message_type(1);
  static const int CMResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMResponse, response_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMResponse, nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMResponse, cluster_num_),
  };
  CMResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMResponse_descriptor_,
      CMResponse::default_instance_,
      CMResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMResponse));
  ResponseType_descriptor_ = file->enum_type(0);
  NodeState_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_kingso_5fcm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeInfo_descriptor_, &NodeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMResponse_descriptor_, &CMResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_kingso_5fcm_2eproto() {
  delete NodeInfo::default_instance_;
  delete NodeInfo_reflection_;
  delete CMResponse::default_instance_;
  delete CMResponse_reflection_;
}

void protobuf_AddDesc_kingso_5fcm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017kingso_cm.proto\022\tkingso_cm\"u\n\010NodeInfo"
    "\022\017\n\007node_ip\030\001 \002(\t\022\021\n\tnode_port\030\002 \002(\r\022\020\n\010"
    "protocol\030\003 \002(\005\022#\n\005state\030\004 \002(\0162\024.kingso_c"
    "m.NodeState\022\016\n\006col_id\030\005 \002(\005\"u\n\nCMRespons"
    "e\022.\n\rresponse_type\030\001 \002(\0162\027.kingso_cm.Res"
    "ponseType\022\"\n\005nodes\030\002 \003(\0132\023.kingso_cm.Nod"
    "eInfo\022\023\n\013cluster_num\030\003 \002(\005*I\n\014ResponseTy"
    "pe\022\016\n\nCM_SUCCEED\020\000\022\023\n\017CM_QUERY_FAILED\020\001\022"
    "\024\n\020CM_QUERY_TIMEOUT\020\002*K\n\tNodeState\022\n\n\006No"
    "rmal\020\000\022\014\n\010abnormal\020\001\022\013\n\007timeout\020\002\022\013\n\007unv"
    "alid\020\003\022\n\n\006uninit\020\004", 418);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kingso_cm.proto", &protobuf_RegisterTypes);
  NodeInfo::default_instance_ = new NodeInfo();
  CMResponse::default_instance_ = new CMResponse();
  NodeInfo::default_instance_->InitAsDefaultInstance();
  CMResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_kingso_5fcm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_kingso_5fcm_2eproto {
  StaticDescriptorInitializer_kingso_5fcm_2eproto() {
    protobuf_AddDesc_kingso_5fcm_2eproto();
  }
} static_descriptor_initializer_kingso_5fcm_2eproto_;

const ::google::protobuf::EnumDescriptor* ResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseType_descriptor_;
}
bool ResponseType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NodeState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeState_descriptor_;
}
bool NodeState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int NodeInfo::kNodeIpFieldNumber;
const int NodeInfo::kNodePortFieldNumber;
const int NodeInfo::kProtocolFieldNumber;
const int NodeInfo::kStateFieldNumber;
const int NodeInfo::kColIdFieldNumber;
#endif  // !_MSC_VER

NodeInfo::NodeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeInfo::InitAsDefaultInstance() {
}

NodeInfo::NodeInfo(const NodeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeInfo::SharedCtor() {
  _cached_size_ = 0;
  node_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  node_port_ = 0u;
  protocol_ = 0;
  state_ = 0;
  col_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeInfo::~NodeInfo() {
  SharedDtor();
}

void NodeInfo::SharedDtor() {
  if (node_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete node_ip_;
  }
  if (this != default_instance_) {
  }
}

void NodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeInfo_descriptor_;
}

const NodeInfo& NodeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kingso_5fcm_2eproto();  return *default_instance_;
}

NodeInfo* NodeInfo::default_instance_ = NULL;

NodeInfo* NodeInfo::New() const {
  return new NodeInfo;
}

void NodeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_ip()) {
      if (node_ip_ != &::google::protobuf::internal::kEmptyString) {
        node_ip_->clear();
      }
    }
    node_port_ = 0u;
    protocol_ = 0;
    state_ = 0;
    col_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string node_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_ip().data(), this->node_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_node_port;
        break;
      }
      
      // required uint32 node_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_port_)));
          set_has_node_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_protocol;
        break;
      }
      
      // required int32 protocol = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocol_)));
          set_has_protocol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }
      
      // required .kingso_cm.NodeState state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (kingso_cm::NodeState_IsValid(value)) {
            set_state(static_cast< kingso_cm::NodeState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_col_id;
        break;
      }
      
      // required int32 col_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_id_)));
          set_has_col_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string node_ip = 1;
  if (has_node_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_ip().data(), this->node_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->node_ip(), output);
  }
  
  // required uint32 node_port = 2;
  if (has_node_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->node_port(), output);
  }
  
  // required int32 protocol = 3;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->protocol(), output);
  }
  
  // required .kingso_cm.NodeState state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }
  
  // required int32 col_id = 5;
  if (has_col_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->col_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string node_ip = 1;
  if (has_node_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_ip().data(), this->node_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_ip(), target);
  }
  
  // required uint32 node_port = 2;
  if (has_node_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->node_port(), target);
  }
  
  // required int32 protocol = 3;
  if (has_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->protocol(), target);
  }
  
  // required .kingso_cm.NodeState state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }
  
  // required int32 col_id = 5;
  if (has_col_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->col_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string node_ip = 1;
    if (has_node_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_ip());
    }
    
    // required uint32 node_port = 2;
    if (has_node_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_port());
    }
    
    // required int32 protocol = 3;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocol());
    }
    
    // required .kingso_cm.NodeState state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // required int32 col_id = 5;
    if (has_col_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_ip()) {
      set_node_ip(from.node_ip());
    }
    if (from.has_node_port()) {
      set_node_port(from.node_port());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_col_id()) {
      set_col_id(from.col_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void NodeInfo::Swap(NodeInfo* other) {
  if (other != this) {
    std::swap(node_ip_, other->node_ip_);
    std::swap(node_port_, other->node_port_);
    std::swap(protocol_, other->protocol_);
    std::swap(state_, other->state_);
    std::swap(col_id_, other->col_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeInfo_descriptor_;
  metadata.reflection = NodeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMResponse::kResponseTypeFieldNumber;
const int CMResponse::kNodesFieldNumber;
const int CMResponse::kClusterNumFieldNumber;
#endif  // !_MSC_VER

CMResponse::CMResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMResponse::InitAsDefaultInstance() {
}

CMResponse::CMResponse(const CMResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMResponse::SharedCtor() {
  _cached_size_ = 0;
  response_type_ = 0;
  cluster_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMResponse::~CMResponse() {
  SharedDtor();
}

void CMResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMResponse_descriptor_;
}

const CMResponse& CMResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kingso_5fcm_2eproto();  return *default_instance_;
}

CMResponse* CMResponse::default_instance_ = NULL;

CMResponse* CMResponse::New() const {
  return new CMResponse;
}

void CMResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    response_type_ = 0;
    cluster_num_ = 0;
  }
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .kingso_cm.ResponseType response_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (kingso_cm::ResponseType_IsValid(value)) {
            set_response_type(static_cast< kingso_cm::ResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodes;
        break;
      }
      
      // repeated .kingso_cm.NodeInfo nodes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodes;
        if (input->ExpectTag(24)) goto parse_cluster_num;
        break;
      }
      
      // required int32 cluster_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cluster_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cluster_num_)));
          set_has_cluster_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .kingso_cm.ResponseType response_type = 1;
  if (has_response_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->response_type(), output);
  }
  
  // repeated .kingso_cm.NodeInfo nodes = 2;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nodes(i), output);
  }
  
  // required int32 cluster_num = 3;
  if (has_cluster_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cluster_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .kingso_cm.ResponseType response_type = 1;
  if (has_response_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->response_type(), target);
  }
  
  // repeated .kingso_cm.NodeInfo nodes = 2;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nodes(i), target);
  }
  
  // required int32 cluster_num = 3;
  if (has_cluster_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cluster_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .kingso_cm.ResponseType response_type = 1;
    if (has_response_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_type());
    }
    
    // required int32 cluster_num = 3;
    if (has_cluster_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cluster_num());
    }
    
  }
  // repeated .kingso_cm.NodeInfo nodes = 2;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMResponse::MergeFrom(const CMResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response_type()) {
      set_response_type(from.response_type());
    }
    if (from.has_cluster_num()) {
      set_cluster_num(from.cluster_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMResponse::CopyFrom(const CMResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void CMResponse::Swap(CMResponse* other) {
  if (other != this) {
    std::swap(response_type_, other->response_type_);
    nodes_.Swap(&other->nodes_);
    std::swap(cluster_num_, other->cluster_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMResponse_descriptor_;
  metadata.reflection = CMResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace kingso_cm

// @@protoc_insertion_point(global_scope)
