// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kingso_cm.proto

#ifndef PROTOBUF_kingso_5fcm_2eproto__INCLUDED
#define PROTOBUF_kingso_5fcm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace kingso_cm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_kingso_5fcm_2eproto();
void protobuf_AssignDesc_kingso_5fcm_2eproto();
void protobuf_ShutdownFile_kingso_5fcm_2eproto();

class NodeInfo;
class CMResponse;

enum ResponseType {
  CM_SUCCEED = 0,
  CM_QUERY_FAILED = 1,
  CM_QUERY_TIMEOUT = 2
};
bool ResponseType_IsValid(int value);
const ResponseType ResponseType_MIN = CM_SUCCEED;
const ResponseType ResponseType_MAX = CM_QUERY_TIMEOUT;
const int ResponseType_ARRAYSIZE = ResponseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseType_descriptor();
inline const ::std::string& ResponseType_Name(ResponseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseType_descriptor(), value);
}
inline bool ResponseType_Parse(
    const ::std::string& name, ResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseType>(
    ResponseType_descriptor(), name, value);
}
enum NodeState {
  Normal = 0,
  abnormal = 1,
  timeout = 2,
  unvalid = 3,
  uninit = 4
};
bool NodeState_IsValid(int value);
const NodeState NodeState_MIN = Normal;
const NodeState NodeState_MAX = uninit;
const int NodeState_ARRAYSIZE = NodeState_MAX + 1;

const ::google::protobuf::EnumDescriptor* NodeState_descriptor();
inline const ::std::string& NodeState_Name(NodeState value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodeState_descriptor(), value);
}
inline bool NodeState_Parse(
    const ::std::string& name, NodeState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeState>(
    NodeState_descriptor(), name, value);
}
// ===================================================================

class NodeInfo : public ::google::protobuf::Message {
 public:
  NodeInfo();
  virtual ~NodeInfo();
  
  NodeInfo(const NodeInfo& from);
  
  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeInfo& default_instance();
  
  void Swap(NodeInfo* other);
  
  // implements Message ----------------------------------------------
  
  NodeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string node_ip = 1;
  inline bool has_node_ip() const;
  inline void clear_node_ip();
  static const int kNodeIpFieldNumber = 1;
  inline const ::std::string& node_ip() const;
  inline void set_node_ip(const ::std::string& value);
  inline void set_node_ip(const char* value);
  inline void set_node_ip(const char* value, size_t size);
  inline ::std::string* mutable_node_ip();
  inline ::std::string* release_node_ip();
  
  // required uint32 node_port = 2;
  inline bool has_node_port() const;
  inline void clear_node_port();
  static const int kNodePortFieldNumber = 2;
  inline ::google::protobuf::uint32 node_port() const;
  inline void set_node_port(::google::protobuf::uint32 value);
  
  // required int32 protocol = 3;
  inline bool has_protocol() const;
  inline void clear_protocol();
  static const int kProtocolFieldNumber = 3;
  inline ::google::protobuf::int32 protocol() const;
  inline void set_protocol(::google::protobuf::int32 value);
  
  // required .kingso_cm.NodeState state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline kingso_cm::NodeState state() const;
  inline void set_state(kingso_cm::NodeState value);
  
  // required int32 col_id = 5;
  inline bool has_col_id() const;
  inline void clear_col_id();
  static const int kColIdFieldNumber = 5;
  inline ::google::protobuf::int32 col_id() const;
  inline void set_col_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:kingso_cm.NodeInfo)
 private:
  inline void set_has_node_ip();
  inline void clear_has_node_ip();
  inline void set_has_node_port();
  inline void clear_has_node_port();
  inline void set_has_protocol();
  inline void clear_has_protocol();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_col_id();
  inline void clear_has_col_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* node_ip_;
  ::google::protobuf::uint32 node_port_;
  ::google::protobuf::int32 protocol_;
  int state_;
  ::google::protobuf::int32 col_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_kingso_5fcm_2eproto();
  friend void protobuf_AssignDesc_kingso_5fcm_2eproto();
  friend void protobuf_ShutdownFile_kingso_5fcm_2eproto();
  
  void InitAsDefaultInstance();
  static NodeInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMResponse : public ::google::protobuf::Message {
 public:
  CMResponse();
  virtual ~CMResponse();
  
  CMResponse(const CMResponse& from);
  
  inline CMResponse& operator=(const CMResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMResponse& default_instance();
  
  void Swap(CMResponse* other);
  
  // implements Message ----------------------------------------------
  
  CMResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMResponse& from);
  void MergeFrom(const CMResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .kingso_cm.ResponseType response_type = 1;
  inline bool has_response_type() const;
  inline void clear_response_type();
  static const int kResponseTypeFieldNumber = 1;
  inline kingso_cm::ResponseType response_type() const;
  inline void set_response_type(kingso_cm::ResponseType value);
  
  // repeated .kingso_cm.NodeInfo nodes = 2;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 2;
  inline const ::kingso_cm::NodeInfo& nodes(int index) const;
  inline ::kingso_cm::NodeInfo* mutable_nodes(int index);
  inline ::kingso_cm::NodeInfo* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::kingso_cm::NodeInfo >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::kingso_cm::NodeInfo >*
      mutable_nodes();
  
  // required int32 cluster_num = 3;
  inline bool has_cluster_num() const;
  inline void clear_cluster_num();
  static const int kClusterNumFieldNumber = 3;
  inline ::google::protobuf::int32 cluster_num() const;
  inline void set_cluster_num(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:kingso_cm.CMResponse)
 private:
  inline void set_has_response_type();
  inline void clear_has_response_type();
  inline void set_has_cluster_num();
  inline void clear_has_cluster_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::kingso_cm::NodeInfo > nodes_;
  int response_type_;
  ::google::protobuf::int32 cluster_num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_kingso_5fcm_2eproto();
  friend void protobuf_AssignDesc_kingso_5fcm_2eproto();
  friend void protobuf_ShutdownFile_kingso_5fcm_2eproto();
  
  void InitAsDefaultInstance();
  static CMResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// NodeInfo

// required string node_ip = 1;
inline bool NodeInfo::has_node_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeInfo::set_has_node_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeInfo::clear_has_node_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeInfo::clear_node_ip() {
  if (node_ip_ != &::google::protobuf::internal::kEmptyString) {
    node_ip_->clear();
  }
  clear_has_node_ip();
}
inline const ::std::string& NodeInfo::node_ip() const {
  return *node_ip_;
}
inline void NodeInfo::set_node_ip(const ::std::string& value) {
  set_has_node_ip();
  if (node_ip_ == &::google::protobuf::internal::kEmptyString) {
    node_ip_ = new ::std::string;
  }
  node_ip_->assign(value);
}
inline void NodeInfo::set_node_ip(const char* value) {
  set_has_node_ip();
  if (node_ip_ == &::google::protobuf::internal::kEmptyString) {
    node_ip_ = new ::std::string;
  }
  node_ip_->assign(value);
}
inline void NodeInfo::set_node_ip(const char* value, size_t size) {
  set_has_node_ip();
  if (node_ip_ == &::google::protobuf::internal::kEmptyString) {
    node_ip_ = new ::std::string;
  }
  node_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeInfo::mutable_node_ip() {
  set_has_node_ip();
  if (node_ip_ == &::google::protobuf::internal::kEmptyString) {
    node_ip_ = new ::std::string;
  }
  return node_ip_;
}
inline ::std::string* NodeInfo::release_node_ip() {
  clear_has_node_ip();
  if (node_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = node_ip_;
    node_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 node_port = 2;
inline bool NodeInfo::has_node_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeInfo::set_has_node_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeInfo::clear_has_node_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeInfo::clear_node_port() {
  node_port_ = 0u;
  clear_has_node_port();
}
inline ::google::protobuf::uint32 NodeInfo::node_port() const {
  return node_port_;
}
inline void NodeInfo::set_node_port(::google::protobuf::uint32 value) {
  set_has_node_port();
  node_port_ = value;
}

// required int32 protocol = 3;
inline bool NodeInfo::has_protocol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NodeInfo::set_has_protocol() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NodeInfo::clear_has_protocol() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NodeInfo::clear_protocol() {
  protocol_ = 0;
  clear_has_protocol();
}
inline ::google::protobuf::int32 NodeInfo::protocol() const {
  return protocol_;
}
inline void NodeInfo::set_protocol(::google::protobuf::int32 value) {
  set_has_protocol();
  protocol_ = value;
}

// required .kingso_cm.NodeState state = 4;
inline bool NodeInfo::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NodeInfo::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NodeInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NodeInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline kingso_cm::NodeState NodeInfo::state() const {
  return static_cast< kingso_cm::NodeState >(state_);
}
inline void NodeInfo::set_state(kingso_cm::NodeState value) {
  GOOGLE_DCHECK(kingso_cm::NodeState_IsValid(value));
  set_has_state();
  state_ = value;
}

// required int32 col_id = 5;
inline bool NodeInfo::has_col_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NodeInfo::set_has_col_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NodeInfo::clear_has_col_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NodeInfo::clear_col_id() {
  col_id_ = 0;
  clear_has_col_id();
}
inline ::google::protobuf::int32 NodeInfo::col_id() const {
  return col_id_;
}
inline void NodeInfo::set_col_id(::google::protobuf::int32 value) {
  set_has_col_id();
  col_id_ = value;
}

// -------------------------------------------------------------------

// CMResponse

// required .kingso_cm.ResponseType response_type = 1;
inline bool CMResponse::has_response_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMResponse::set_has_response_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMResponse::clear_has_response_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMResponse::clear_response_type() {
  response_type_ = 0;
  clear_has_response_type();
}
inline kingso_cm::ResponseType CMResponse::response_type() const {
  return static_cast< kingso_cm::ResponseType >(response_type_);
}
inline void CMResponse::set_response_type(kingso_cm::ResponseType value) {
  GOOGLE_DCHECK(kingso_cm::ResponseType_IsValid(value));
  set_has_response_type();
  response_type_ = value;
}

// repeated .kingso_cm.NodeInfo nodes = 2;
inline int CMResponse::nodes_size() const {
  return nodes_.size();
}
inline void CMResponse::clear_nodes() {
  nodes_.Clear();
}
inline const ::kingso_cm::NodeInfo& CMResponse::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::kingso_cm::NodeInfo* CMResponse::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::kingso_cm::NodeInfo* CMResponse::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::kingso_cm::NodeInfo >&
CMResponse::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::kingso_cm::NodeInfo >*
CMResponse::mutable_nodes() {
  return &nodes_;
}

// required int32 cluster_num = 3;
inline bool CMResponse::has_cluster_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMResponse::set_has_cluster_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMResponse::clear_has_cluster_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMResponse::clear_cluster_num() {
  cluster_num_ = 0;
  clear_has_cluster_num();
}
inline ::google::protobuf::int32 CMResponse::cluster_num() const {
  return cluster_num_;
}
inline void CMResponse::set_cluster_num(::google::protobuf::int32 value) {
  set_has_cluster_num();
  cluster_num_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace kingso_cm

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< kingso_cm::ResponseType>() {
  return kingso_cm::ResponseType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< kingso_cm::NodeState>() {
  return kingso_cm::NodeState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_kingso_5fcm_2eproto__INCLUDED
